"""
This is a template algorithm on Quantopian for you to adapt and fill in.
"""
from quantopian.algorithm import attach_pipeline, pipeline_output
from quantopian.pipeline import Pipeline
import numpy as np
import pandas as pd
from datetime import timedelta
from datetime import date
import statsmodels
from statsmodels.tsa.stattools import coint
import statsmodels.tsa.stattools as ts
from quantopian.pipeline.data import morningstar as ms
from quantopian.pipeline.data import Fundamentals
from quantopian.pipeline.filters.morningstar import Q1500US
from quantopian.pipeline.data.builtin import USEquityPricing
from quantopian.pipeline.classifiers.morningstar import Sector
from quantopian.pipeline.factors import CustomFactor, AverageDollarVolume
from quantopian.pipeline.data import morningstar as mstar
from quantopian.pipeline.filters.morningstar import IsPrimaryShare
from quantopian.pipeline.factors import SimpleMovingAverage
import statsmodels.api as sm
import quantopian.optimize as opt

# MUCH OF THIS ADAPTED FROM STEPHAN BOTES NOTEBOOK

# GLOBAL CONSTANTS
COMMON_STOCK= 'ST00000001'

TARGET_POSITIONS = 25
ANALYSIS_DATE = date.today()-timedelta(days=7)
WINDOW_START = ANALYSIS_DATE-timedelta(days=60)
WINDOW_END = ANALYSIS_DATE

def initialize(context):
    #context.Eq_arr = [(sid(24),sid(45815)), (sid(5061), sid(42950))]
    context.spread = 0
    context.mean = 0 
    context.stddev = 0 
    context.hedgeR = 0 
    context.current_price1 = 0 
    context.current_price2 = 0 
    context.price_history1 = 0 
    context.price_history2 = 0
    context.eq_arr_as_pairs = []

    my_pipe = make_pipeline()
    attach_pipeline(my_pipe, 'my_pipeline')
    schedule_function(set_pairs, date_rules.week_start(), time_rules.market_open())
    schedule_function(take_positions, date_rules.every_day(), time_rules.market_open(hours = 1))
    # schedule_function(take_positions, date_rules.every_day(), time_rules.market_open(hours = 2))
    schedule_function(take_positions, date_rules.every_day(), time_rules.market_open(hours = 3))
    # schedule_function(take_positions, date_rules.every_day(), time_rules.market_open(hours = 4))
    schedule_function(take_positions, date_rules.every_day(), time_rules.market_open(hours = 5))
    # schedule_function(take_positions, date_rules.every_day(), time_rules.market_open(hours = 6))
    schedule_function(take_positions, date_rules.every_day(), time_rules.market_open(hours = 7))
    schedule_function(exit_positions, date_rules.every_day(), time_rules.market_close())

#==============EVERYTHING AFTER THIS LINE IS FOR CREATING PIPELINE============#

def make_pipeline():
    pipe = Pipeline()
    stocksUniverse = universe_filters()
    industry_code = ms.asset_classification.morningstar_industry_code.latest
    pipe = Pipeline(
        screen = (stocksUniverse),
        columns = {
            'industry_code': industry_code,
        }
    )
    return pipe

def universe_filters():
    # Equities with an average daily volume greater than 750000.
    high_volume = (AverageDollarVolume(window_length=252) > 750000)
    # Not Misc. industry:
    indsutry_code_filter = ~ms.asset_classification.morningstar_industry_code.latest.isnull()
    
    # Equities that morningstar lists as primary shares.
    # NOTE: This will return False for stocks not in the morningstar database.
    primary_share = IsPrimaryShare()
    
    # Equities for which morningstar's most recent Market Cap value is above $300m.
    have_market_cap = mstar.valuation.market_cap.latest > 300000000
    
    # Equities not listed as depositary receipts by morningstar.
    # Note the inversion operator, `~`, at the start of the expression.
    not_depositary = ~mstar.share_class_reference.is_depositary_receipt.latest
    
    # Equities that listed as common stock (as opposed to, say, preferred stock).
    # This is our first string column. The .eq method used here produces a Filter returning
    # True for all asset/date pairs where security_type produced a value of 'ST00000001'.
    common_stock = mstar.share_class_reference.security_type.latest.eq('COMMON_STOCK')
    
    # Equities whose exchange id does not start with OTC (Over The Counter).
    # startswith() is a new method available only on string-dtype Classifiers.
    # It returns a Filter.
    not_otc = ~mstar.share_class_reference.exchange_id.latest.startswith('OTC')
    
    # Equities whose symbol (according to morningstar) ends with .WI
    # This generally indicates a "When Issued" offering.
    # endswith() works similarly to startswith().
    not_wi = ~mstar.share_class_reference.symbol.latest.endswith('.WI')
    
    # Equities whose company name ends with 'LP' or a similar string.
    # The .matches() method uses the standard library `re` module to match
    # against a regular expression.
    not_lp_name = ~mstar.company_reference.standard_name.latest.matches('.* L[\\. ]?P\.?$')
    # Equities with a null entry for the balance_sheet.limited_partnership field.
    # This is an alternative way of checking for LPs.
    not_lp_balance_sheet = mstar.balance_sheet.limited_partnership.latest.isnull()
    # Highly liquid assets only. Also eliminates IPOs in the past 12 months
    # Use new average dollar volume so that unrecorded days are given value 0
    # and not skipped over
    # S&P Criterion
    liquid = ADV_adj() > 250000
    # Add logic when global markets supported
    # S&P Criterion
    domicile = True
    # Keep it to liquid securities
    ranked_liquid = ADV_adj().rank(ascending=False) < 1500
    # universe_filter = (indsutry_code_filter & high_volume & primary_share & have_market_cap & not_depositary & common_stock & not_otc & not_wi & not_lp_name & not_lp_balance_sheet & liquid & domicile & liquid & ranked_liquid)
    universe_filter = (indsutry_code_filter & primary_share & high_volume
                      )
    
    return universe_filter

# Average Dollar Volume without nanmean, so that recent IPOs are truly removed
class ADV_adj(CustomFactor):
    inputs = [USEquityPricing.close, USEquityPricing.volume]
    window_length = 252
    
    def compute(self, today, assets, out, close, volume):
        close[np.isnan(close)] = 0
        out[:] = np.mean(close * volume, 0)

#   ======EVERYTHING BEFORE THIS LINE IS FOR CREATING PIPELINE======#

# here instead of just pairing the stocks sequentially, we will get cointegrated pairs and use those to trade
    # first need a list of equities
    #     ** list of list of equities by industry, to slow if just one big list
    # Second need to convert equities array to prices dataframe
    #        (so cointegration function can check for pairs)
    # Third run the cointegration function ont he prices dataframe
    #        which will output all the cointegrated pairs
def get_2d_equities_from_pipe_by_industry(universe):
    universe = universe.sort_values(by='industry_code')
    equity_list_2d = []
    industry_list = []
    i=0
    while i in range(len(universe.industry_code)-1):
        if universe.industry_code[i] == universe.industry_code[i+1]:
            industry_list.append(universe.index[i])
            i += 1
        else:
            if len(industry_list) != 0:
                industry_list.append(universe.index[i])
                equity_list_2d.append(industry_list)
                industry_list = []
            i += 1
    return equity_list_2d

def eq_list_to_price_df(eq_list,num_days, data):
    price_df = data.history(eq_list,
                            fields=['price'],
                            bar_count=num_days,
                            frequency='1d')['price']
    return price_df

def find_cointegrated_pairs(df_array): # Takes in an array of dataframes, outputs cointegrated pairs
    for df in df_array:
        n = df.shape[1]
        score_matrix = np.zeros((n, n))
        pvalue_matrix = np.ones((n, n))
        keys = df.keys()
        pairs = []
        total_stocks = n
        total_tests = ((total_stocks)*(total_stocks - 1))/2 # n choose 2 total combinations
    for i in range(n):
        for j in range(i+1, n):
            S1 = df[keys[i]]
            S2 = df[keys[j]]
            result = ts.coint(S1, S2)
            score = result[0]
            pvalue = result[1]
            score_matrix[i, j] = score
            pvalue_matrix[i, j] = pvalue
            if pvalue < (0.1): # Applying Bonferroni correction 
                pairs.append((keys[i], keys[j]))
    total_stocks = 0
    # print pairs
    return pairs


#   =======EVERYTHING AFTER THIS LINE IS FOR ORDERING==========#

def set_pairs(context, data):
    print "SET PAIRS BEGINNING"
    context.output = pipeline_output('my_pipeline')
    # turn pipeline output into 2d array of equities by industry
    context.eq_arr_by_indus = get_2d_equities_from_pipe_by_industry(context.output)
    # use loop to convert 2d array of equities into array of price dataframes by industry
    context.arr_of_price_dfs = []
    for i in range(len(context.eq_arr_by_indus)):
        this_industry = context.eq_arr_by_indus[i]
        this_price_df = eq_list_to_price_df(this_industry, 70, data)
        # print this_price_df
        context.arr_of_price_dfs.append(this_price_df)
    # find cointegrated pairs on this array of price dataframes
    context.eq_arr_as_pairs = find_cointegrated_pairs(context.arr_of_price_dfs)
    print " LOOK AT THE PAIRS"
    print context.eq_arr_as_pairs
    print "YOU SAW THE PAIRS?"
    return
    
def take_positions(context, data):
    number_of_stddevs = 0.75
    # num_pairs = len(context.eq_arr_as_pairs)
    # if num_pairs == 0:
    #     return
    # else:    
    #     eq_wgt = 1/num_pairs
    eq_wgt = .25
    for pair in context.eq_arr_as_pairs:
        # print pair
        stock1 = pair[0]
        stock2 = pair[1]
        
        price_history1 = data.history(stock1, 'price', 60, '1d')
        price_history2 = data.history(stock2, 'price', 60, '1d')
        mean = price_history1.mean() - price_history2.mean()
        stddev = price_history1.std() - price_history2.std()
        current_price1 = data.current(stock1, 'price')
        current_price2 = data.current(stock2, 'price')
        spread = current_price1 - current_price2
        hedgeR = hedge_ratio(price_history2, price_history1)
        if spread > mean + stddev * number_of_stddevs:
            print "ABOVE BAND"
            if hedgeR < 0:
                return
            print "SHORT 1 BUY 2 hedge ratio is: ", hedgeR
            print "stock 1 is", stock1
            print "stock 2 is", stock2
            print "I have this much cash to do it: ", context.portfolio.cash
            cash = context.portfolio.cash
            # objective = opt.TargetWeights({stock1: -eq_wgt, stock2: eq_wgt})
            # #short1 = opt.ShortOnly(stock1)
            # #long2 = opt.LongOnly(stock2)
            # hedge = opt.Pair(stock2, stock1, hedgeR, 0)
            # constraints = [hedge]
            # order_optimal_portfolio(objective, constraints)
            order(stock1, -cash*eq_wgt)
            order(stock2, cash*eq_wgt*hedgeR)
            print "I think I shorted this much of stock 1:", context.portfolio.cash * eq_wgt *hedgeR
            print "I think I longed this much of stock 2:", context.portfolio.cash * eq_wgt
            print "I actually shorted this much of stock 1: ", context.portfolio.positions[stock1].amount
            print "I actually bought this much of stock 2: ", context.portfolio.positions[stock2].amount
        if spread < mean - stddev * number_of_stddevs:
            print "BELOW BAND"
            if hedgeR < 0:
                return
            print "SHORT 2 BUY 1 hedge ratio is: ", hedgeR
            print "stock 1 is", stock1
            print "stock 2 is", stock2
            print "I have this much cash to do it: ", context.portfolio.cash
            # objective = opt.TargetWeights({stock1: eq_wgt, stock2: -eq_wgt})
            # #short2 = opt.ShortOnly(stock2)
            # #long1 = opt.LongOnly(stock1)
            # hedge = opt.Pair(stock1, stock2, hedgeR, 0)
            # constraints = [hedge]
            # order_optimal_portfolio(objective, constraints)
            cash = context.portfolio.cash
            order(stock1, cash*eq_wgt)
            order(stock2, -cash*eq_wgt*hedgeR)
            print "I think I longed this much of stock 1:", context.portfolio.cash * eq_wgt 
            print "I think I shorted this much of stock 2:", context.portfolio.cash * eq_wgt * hedgeR
            print "I actually bought this much of stock 1: ", context.portfolio.positions[stock1].amount
            print "I actually shorted this much of stock 2: ", context.portfolio.positions[stock2].amount
        amt_stock1 = context.portfolio.positions[stock1].amount
        amt_stock2 = context.portfolio.positions[stock2].amount
        if spread == mean:
            print "SPREAD = MEAN"
            #if you're longing stock 1 
            if amt_stock1 > 0:
                print "long1 amount: ", amt_stock1
                print "stock1 is:", stock1
                order(stock1, -amt_stock1)
            #if youre longing stock2 
            if camt_stock2 > 0:
                print "long2 amount: ", amt_stock2
                print "stock2 is:", stock2
                order(stock2, -amt_stock2)
            #if youre shorting stock1
            if amt_stock1 < 0:
                print "short1 amount: ", amt_stock1
                print "stock1 is:", stock1
                order(stock1, amt_stock1)
            #if youre shorting stock2
            if amt_stock2 > 0:
                print "short2 amount: ", amt_stock2
                print "stock2 is:", stock2
                order(stock2, amt_stock2)
        if (amt_stock1 > 0 and amt_stock2 < 0) and spread > mean:
            print "SPREAD ABOVE MEAN"
            print "I'm closing long 1 for this amount", amt_stock1
            print "and I'm closing short 2 for this amount", amt_stock2
            print "stock 1 ^ above is", stock1
            print "stock 2 ^ above is", stock2
            order(stock1, -amt_stock1)
            order(stock2, amt_stock2)
        if (amt_stock1 < 0 and amt_stock2 > 0) and spread < mean:
            print "SPREAD BELOW MEAN"
            print "I'm closing long 2 for this amount", amt_stock2
            print "and I'm closing short 1 for this amount", amt_stock1
            print "stock 1 ^ above is", stock1
            print "stock 2 ^ above is", stock2
            order(stock1, amt_stock1)
            order(stock2, -amt_stock2)
        return

def hedge_ratio(Y, X):
    X = sm.add_constant(X)
    model = sm.OLS(Y, X).fit()
    return model.params[1]

def exit_positions(context, data):
    for pair in context.eq_arr_as_pairs:
        stock1 = pair[0]
        stock2 = pair[1]
        amt_stock1 = context.portfolio.positions[stock1].amount
        amt_stock2 = context.portfolio.positions[stock2].amount
        if amt_stock1 > 0:
            print "end of day didn't close positions, closing long of stock 1 for this amount: ", amt_stock1
            print "stock 1 ^ above is", stock1
            order(stock1, -amt_stock1)
        #if youre longing stock2 
        if amt_stock2 > 0:
            print "end of day didn't close positions, closing long of stock 2 for this amount: ", amt_stock2
            print "stock 2 ^ above is", stock2
            order(stock2, -amt_stock2)
        #if youre shorting stock1
        if amt_stock1 < 0:
            print "end of day didn't close positions, closing short of stock 1 for this amount: ", amt_stock1
            print "stock 1 ^ above is", stock1
            order(stock1, amt_stock1)
        #if youre shorting stock2
        if amt_stock2 > 0:
            print "end of day didn't close positions, closing short of stock 2 for this amount: ", amt_stock2
            print "stock 2 ^ above is", stock2
            order(stock2, amt_stock2)
        return
#====================EVERYTHING BEFORE THIS LINE IS FOR ORDERING===============#

def record_vars(context, data):
    pass
